This framework is related to text analysis and processing. It mainly targets English and Arabic languages. It consists of 33 generic functions. It is organized under three main categories; the first one is that related to general processing functions that can be applied to both English and Arabic. The second category is those functions that are dedicated for English only, and finally, the third category is those functions that are dedicated for Arabic only. These framework will be updated consecutively. It is designed according to Python 3.12.7. This framework depends on some Python built-in modules; these are string and re modules. To demonstrate, in this framework, the string module is beneficial as it includes ASCII tables and provides a ready-made list of punctuations. This feature has greatly helped me in text filtering by offering predefined punctuation lists. Secondly, the re module in Python provides powerful tools for working with regular expressions, allowing for advanced text searching, pattern matching, and string manipulation. While I utilized this module in my project, I have intentionally minimized its usage within functions, as I aimed to keep them as generic as possible. My focus is on designing flexible functions that could handle various text processing tasks without relying heavily on predefined regular expression patterns. Now, it is the time to speak about this framework functions one by one in detail.
First: functions that have general usage with both English and Arabic:
1- space_count: It counts the total number of spaces in the given text. This function takes a single parameter: the text to analyze. It returns the total count of spaces found in the text. Spaces include both single spaces and multiple consecutive spaces.
2- word_count: It counts the total number of words in the given text. This function takes a single parameter: the text to analyze. It returns the total count of words found in the text. Words are identified by splitting the text at whitespace characters.
3- line_count: It counts the total number of lines in the given text. This function takes a single parameter: the text to analyze. It returns the total count of lines found in the text. Lines are identified by newline characters ('\n').
4- sentence_count: It counts the total number of sentences in the given text. This function takes a single parameter: the text to analyze. It returns the total count of sentences found in the text. Sentences are identified by terminal punctuation marks such as periods (.), exclamation marks (!), and question marks (?). The function supports both English and Arabic punctuation marks.
5- character_count: It counts the total number of characters in the given text, excluding spaces. This function takes a single parameter: the text to analyze. It returns the total count of characters in the text. The function is useful for determining the length of the text in terms of characters.
6- special_characters_count: It counts the total number of punctuation marks in the given text. This function takes a single parameter: the text to analyze. It returns the total count of punctuation marks found in the text. The function supports both English and Arabic punctuation marks and provides a list of the found punctuation marks.
7- specific_character_count: It counts the total number of occurrences of a specific character in the given text. This function takes two parameters: the text to analyze and the character to count. It returns the total count of the specified character in the entire text. The function is case-sensitive and counts the character exactly as provided.
8- specific_word_character_count: It counts the total number of words containing a specific character within the given text. This function takes two parameters: the text to analyze and the character to search for within the words. It returns the total count of unique words that contain the specified character at least once. The function is case-insensitive and ignores punctuation and digits attached to the words.
9- longest_word: It finds and returns the longest word in the given text. This function takes a single parameter: the text to analyze. In case there are multiple words of the same maximum length, the first one encountered is returned. The function ignores punctuation and digits attached to the words.
10- extra_space_clean: It filters the given text from extra spaces. This function takes a single parameter: the text you need to filter from extra spaces. It returns a new string filtered from all extra spaces, ensuring that each single word is separated by a single space only. The function is useful for cleaning up text that may have inconsistent spacing. It supports both Arabic and English.
11- special_character_removal: It removes punctuation marks from the given text. This function takes a single parameter: the text from which to remove punctuation marks. It returns a new string with all punctuation marks removed. The function supports both English and Arabic punctuation marks.
12- word_beginning: It identifies and counts words in the given text that begin with the specified letter. This function takes two parameters: the text to analyze and the letter to search for at the beginning of words. It returns the total count of words that start with the specified letter and prints a list of these words. The function is case-insensitive and ignores punctuation and digits attached to the words.
13- word_end: It identifies and counts words in the given text that end with the specified character. This function takes two parameters: the text to analyze and the character to search for at the end of words. It returns the total count of words that end with the specified character and prints a list of these words. The function is case-insensitive and ignores punctuation and digits attached to the words.
14- repeated_words: It identifies and counts repeated words in the given text. This function takes a single parameter: the text to analyze. It returns the total count of unique words that appear more than once in the text. The function is case-insensitive and ignores punctuation and digits attached to the words.
15- word_check: It checks if the specified word exists within the given text. This function takes two parameters: the text to search within and the word to search for. It returns True if the word is found in the text, otherwise it returns False. The function is case-insensitive and ignores punctuation and digits attached to the words.
16- selected_word_length_display: It extracts and displays words from the given text that have a specific length. This function takes two parameters: the text to analyze and the desired length of words to extract. It returns a string containing the words that match the specified length, or None if no such words are found.
17- word_reversal: This function reverses words in the given text that have a length greater than or equal to the specified number. This function takes two parameters: the text to process and the minimum length of words to reverse. It returns a new string where words meeting the length criterion are reversed, while others remain unchanged.
18- suffix_words: This function analyzes the given text and identifies words that end with the specified suffix. It takes two parameters: the text to analyze and the suffix to search for. The function returns a list of words that end with the given suffix and the total count of such words. The function is case-insensitive and ignores punctuation and digits attached to the words.
19- prefix_words: This function analyzes the given text and identifies words that start with the specified prefix. It takes two parameters: the text to analyze and the prefix to search for. The function returns a list of words that start with the given prefix and the total count of such words. The function is  case-insensitive and ignores punctuation and digits attached to the words.
Second: functions that are dedicated for English language only:
1- vowel_consonant_count: It counts the total number of vowels and consonants in the given text. This function takes a single parameter: the text to analyze. It returns a tuple containing the total count of vowels and consonants. The function is case-insensitive and only considers alphabetic characters.
2- upper_lower_count: It counts the total number of uppercase and lowercase letters in the given text. This function takes a single parameter: the text to analyze. It returns a tuple containing the total count of uppercase and lowercase letters. The function uses the ASCII values to determine the case of each letter.
3- ed_ing_count: It counts the total number of words ending with 'ed' and 'ing' in the given text, excluding specified words. This function takes two parameters: the text to analyze and a list of words to exclude from the analysis. In case you do not have any exceptions to exclude, you can leave its square brackets empty. It returns a tuple containing the total count of words ending with 'ed' and 'ing'. The function is case-insensitive and ignores punctuation and digits.
4- uncontract_word: This function is useful incase you need to make your writing more formal; it expands contracted words in the given text to their full forms. This function takes a single parameter: the text to analyze. It returns a new string with all contracted words expanded. The function uses a predefined dictionary of common contractions and their expansions.
5- english_stop_words_removal: This function is useful for those who work on text analysis; it removes common English stop words from the given text. This function takes a single parameter: the text to analyze. It returns a new string with all stop words removed. The function uses a predefined list of common English stop words.
6- title_format: It formats the given title according to English title capitalization rules. This function takes a single parameter: the title to format. It returns a new string with the title formatted according to title capitalization rules. The function capitalizes the first and last words of the text, as well as all words that are not common exceptions. Common exceptions include articles, conjunctions, and prepositions.
7- definite_english_detection: It detects and counts definite nouns in the given English text. This function uses a regular expression to find words that are preceded by the definite article 'the'. It returns a formatted string containing the list of definite nouns found and their count.
8- indefinite_english_detection: It is the opposite of the above function; it detects and counts indefinite nouns in the given English text. This function uses a regular expression to find words that are preceded by the indefinite articles 'a' or 'an'. It returns a formatted string containing the list of indefinite nouns found and their count.
9- sentence_capitalize: It capitalizes the first letter of each sentence in a string and removes extra spaces. This function splits the input text into sentences based on the delimiters '?!.' and capitalizes the first letter of each sentence. It joins them back into a single string. This function takes only one parameter which is the string to be processed. It returns the processed string with capitalized sentences and no extra spaces before punctuations, but it returns an empty string if the input text is empty or contains only whitespace.
Third: functions that are dedicated for Arabic language only:
1- definite_arabic: it identifies and extracts words that begin with the Arabic definite article 'ال' (alef lam) and its variations. This function takes a single parameter: the text to analyze. It returns the total count of words that start with the Arabic definite article and prints a list of these words found within the given text. The function ignores punctuation and digits.
2- feminine_arabic_sign: It identifies and extracts words that end with the Arabic feminine sign 'ة' (teh marbyuta). This function takes a single parameter: the text to analyze. It returns the total count of words that end with the Arabic feminine sign and prints a list of these words found in the given text. it ignores punctuation and digits.
3- feminine_plural_arabic: It identifies and extracts words that end with common Arabic feminine plural suffixes within the given text. This function takes two parameters: the text to analyze and a list of words to exclude from the analysis. In case you do not have any exceptions to exclude, you can leave its square brackets empty. It returns the total count of words that end with common Arabic feminine plural suffixes and prints a list of these words found within the given text. It ignores punctuation and digits.
4- diacritics_removal: It displays the Arabic text free of any diacritics. This function takes a single parameter: the text from which to remove diacritics. It returns a new string with all diacritics removed.
5- singular_extended_arabic: It finds singular extended Arabic nouns ending with 'اء' (alif and hamza) in the given text, excluding specified exceptions. It takes two parameters; the first one is the text string, and the second one is a list of user-defined exceptions. In case you do not have any exceptions to exclude, you can leave its square brackets empty. It returns the count of singular extended Arabic words found in the text, excluding common and user-defined exceptions. The function strips punctuation, digits, and diacritics from the words before processing.
This is a quick overview of all the functions contained in this framework. In case you want to learn about any specific function individually, you can use the help() function and pass the name of the function you need to know about in its parameter to get detailed information about it.
Best wishes.